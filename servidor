#!/usr/bin/env python3
import asyncio
from tcp import Servidor
from tcp import Conexao
import re

Conexao.dados_residuais = b''

apelidos = {}
canais = {}


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    canaisSaida = []
    for canal in canais:
        if conexao in canais[canal]:
            canaisSaida += canais[canal]
            canais[canal].pop(conexao)

    for conection in canaisSaida:
        conection.enviar(b':%s QUIT :Connection closed\r\n' % apelidos[conexao])
    if apelidos.get(conexao) is not None:
        apelidos.pop(conexao)
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    dados = Conexao.dados_residuais + dados
    linhas = dados.split(b'\r\n')
    if(linhas[-1].endswith(b'\r\n')):
        Conexao.dados_residuais = b''
    else:
        Conexao.dados_residuais = linhas.pop(-1)

    for linha in linhas:
        analisa_linha(conexao, linha, dados)


def analisa_linha(conexao, linha, dados):
    linha = linha.strip() # remove espa√ßos desnecessarios
    if linha[0:4].upper() == b'PING':
        send(conexao, b':server PONG server :%s\r\n' % linha.split()[1])
    elif linha[0:4].upper() == b'NICK':
        nome = linha.split(b' ',1)[1]
        if validar_nome(nome):
            nome_anterior = apelidos.get(conexao)
            if nome_anterior is None:
                nome_anterior = b'*'
            if nome.lower() in apelidos.values():
                send(conexao, b':server 433 %s %s :Nickname is already in use\r\n' % (nome_anterior, nome))
            elif nome_anterior == b'*':
                send(conexao, b':server 001 %s :Welcome\r\n' % nome)
                send(conexao, b':server 422 %s :MOTD File is missing\r\n' % nome)
                apelidos[conexao] = nome.lower()
            else:
                apelidos[conexao] = nome.lower()
                send(conexao, b':%s NICK %s\r\n' % (nome_anterior, nome))
        else:
            send(conexao, b':server 432 * %s :Erroneous nickname\r\n' % nome)

    elif linha[0:7].upper() == b'PRIVMSG':
        transmissor = apelidos[conexao].lower()
        receptor, mensagem = linha.split()[1:]
        receptor = receptor.lower()
        if receptor.startswith(b'#'):
            canal = receptor[1:]
            for c in canais[canal]:
                if(c != conexao):
                    send(c, b':%s PRIVMSG #%s %s\r\n' % (transmissor, canal, mensagem))
        elif receptor in apelidos.values():
            for conexao, nome in apelidos.items():
                if nome == receptor:
                    send(conexao, b':%s PRIVMSG %s %s\r\n' % (transmissor, receptor, mensagem))

    elif linha[0:4].upper() == b'JOIN':
        canal = linha.split()[1][1:]
        if validar_nome(canal):
            if canais.get(canal) is None:
                canais[canal] = {}

            canais[canal][conexao] = apelidos[conexao]

            for conection in canais[canal]:
                if (conection != conexao):
                    conection.enviar(b':%s JOIN :#%s\r\n' % (apelidos[conexao], canal))

            conexao.enviar(b':%s JOIN :#%s\r\n' % (apelidos[conexao], canal) +
                           b':server 353 %s = #%s :' % (apelidos[conexao], canal))

            mensagem = b' '.join(sorted(apelidos[conexao] for conexao in canais[canal]))
            conexao.enviar(mensagem + b'\r\n')

            conexao.enviar(b':server 366 %s #%s :End of /NAMES list.\r\n' % (apelidos[conexao], canal))
        else:
            send(conexao, b':server 403 %s :No such channel\r\n' % canal)

    elif linha[0:4].upper() == b'PART':
        canal = linha.split()[1][1:]
        if validar_nome(canal):
            for c in canais[canal]:
                send(c, b':%s PART #%s\r\n' % (apelidos[conexao], canal))
            canais[canal].pop(conexao)
        else:
            send(conexao, b':server 403 %s :No such channel\r\n' % canal)
def send(conexao, dados):
    conexao.enviar(dados)

def conexao_aceita(conexao):
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
